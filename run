#!/bin/bash

# Set working directories
BACKEND_DIR="src"
FRONTEND_DIR="frontend"
BACKEND_PORT=1512  # Flask backend port
FRONTEND_PORT=3000 # Next.js frontend port

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to check if port is in use
port_in_use() {
    lsof -i :$1 >/dev/null 2>&1
}

# Function to kill process using a specific port
kill_port_process() {
    local port=$1
    if port_in_use $port; then
        echo -e "${YELLOW}Killing process on port $port...${NC}"
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            lsof -ti :$port | xargs kill -9 2>/dev/null
        else
            # Linux
            fuser -k $port/tcp 2>/dev/null
        fi
    fi
}

# Function to check service health
check_service_health() {
    local port=$1
    local service=$2
    local max_attempts=30
    local attempt=1

    echo -e "${YELLOW}Waiting for $service to start on port $port...${NC}"
    
    while ! nc -z localhost $port; do
        if [ $attempt -eq $max_attempts ]; then
            echo -e "${RED}$service failed to start after $max_attempts attempts${NC}"
            return 1
        fi
        sleep 1
        ((attempt++))
    done
    
    echo -e "${GREEN}$service is running on port $port${NC}"
    return 0
}

# Function to check environment files
check_env_files() {
    # Check backend environment
    if [ ! -f "$BACKEND_DIR/.env" ] && [ -f "$BACKEND_DIR/.env.example" ]; then
        echo -e "${YELLOW}Creating backend .env from example...${NC}"
        cp "$BACKEND_DIR/.env.example" "$BACKEND_DIR/.env"
    fi

    # Check frontend environment
    if [ ! -f "$FRONTEND_DIR/.env.local" ]; then
        echo -e "${YELLOW}Creating frontend .env.local...${NC}"
        echo "NEXT_PUBLIC_API_URL=http://localhost:$BACKEND_PORT" > "$FRONTEND_DIR/.env.local"
        echo "NODE_ENV=development" >> "$FRONTEND_DIR/.env.local"
    fi
}

# Function to kill all related processes
cleanup() {
    echo -e "\n${YELLOW}Stopping services...${NC}"
    
    # Kill processes on specific ports
    kill_port_process $BACKEND_PORT
    kill_port_process $FRONTEND_PORT
    
    # Kill any remaining Python and Node processes related to our app
    pkill -f "python.*app.py" 2>/dev/null
    pkill -f "node.*next" 2>/dev/null
    
    # Kill any zombie processes
    for pid in $(ps -ef | grep -E "python.*app.py|node.*next" | grep -v grep | awk '{print $2}'); do
        kill -9 $pid 2>/dev/null
    done
    
    echo -e "${GREEN}All services stopped${NC}"
    exit 0
}

# Register cleanup for different signals
trap cleanup SIGINT SIGTERM EXIT

# Check if directories exist
if [ ! -d "$BACKEND_DIR" ]; then
    echo -e "${RED}Backend directory not found!${NC}"
    exit 1
fi

if [ ! -d "$FRONTEND_DIR" ]; then
    echo -e "${RED}Frontend directory not found!${NC}"
    exit 1
fi

# Kill any existing processes on our ports
kill_port_process $BACKEND_PORT
kill_port_process $FRONTEND_PORT

# Check for required tools
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Python 3 is required but not installed${NC}"
    exit 1
fi

if ! command -v node &> /dev/null; then
    echo -e "${RED}Node.js is required but not installed${NC}"
    exit 1
fi

if ! command -v npm &> /dev/null; then
    echo -e "${RED}npm is required but not installed${NC}"
    exit 1
fi

# Check for netcat (required for health checks)
if ! command -v nc &> /dev/null; then
    echo -e "${RED}netcat (nc) is required but not installed${NC}"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo -e "${YELLOW}Install with: brew install netcat${NC}"
    else
        echo -e "${YELLOW}Install with: sudo apt-get install netcat${NC}"
    fi
    exit 1
fi

# Setup virtual environment if it doesn't exist
if [ ! -d "venv" ]; then
    echo -e "${YELLOW}Setting up Python virtual environment...${NC}"
    python3 -m venv venv
    if [ $? -ne 0 ]; then
        echo -e "${RED}Failed to create virtual environment${NC}"
        exit 1
    fi
fi

# Activate virtual environment
source venv/bin/activate
if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to activate virtual environment${NC}"
    exit 1
fi

# Check and create environment files
check_env_files

# Install Python dependencies
echo -e "${YELLOW}Installing Python dependencies...${NC}"
pip install -r requirements.txt
if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to install Python dependencies${NC}"
    exit 1
fi

# Install frontend dependencies
echo -e "${YELLOW}Installing frontend dependencies...${NC}"
cd "$FRONTEND_DIR"
npm install
if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to install frontend dependencies${NC}"
    exit 1
fi
cd ..

# Start services
echo -e "${GREEN}Starting services...${NC}"

# Start backend
echo -e "${YELLOW}Starting backend server on port $BACKEND_PORT...${NC}"
(cd "$BACKEND_DIR" && FLASK_ENV=development python3 app.py) &
BACKEND_PID=$!

# Check backend health
if ! check_service_health $BACKEND_PORT "Backend"; then
    cleanup
    exit 1
fi

# Start frontend
echo -e "${YELLOW}Starting frontend on port $FRONTEND_PORT...${NC}"
(cd "$FRONTEND_DIR" && npm run dev) &
FRONTEND_PID=$!

# Check frontend health
if ! check_service_health $FRONTEND_PORT "Frontend"; then
    cleanup
    exit 1
fi

echo -e "${GREEN}All services started successfully!${NC}"
echo -e "${GREEN}Frontend: http://localhost:$FRONTEND_PORT${NC}"
echo -e "${GREEN}Backend: http://localhost:$BACKEND_PORT${NC}"
echo -e "${YELLOW}Press Ctrl+C to stop all services${NC}"

# Wait for processes
wait $BACKEND_PID $FRONTEND_PID
